import React, { useState, useEffect } from 'react';
import Tetris from './components/Tetris';
import { sdk } from '@farcaster/miniapp-sdk';
import { FarcasterUser } from './types';

const App: React.FC = () => {
  const [user, setUser] = useState<FarcasterUser | null>(null);

  // Use an effect to set the initial user from the SDK context
  useEffect(() => {
    const setInitialUser = async () => {
      const context = await sdk.context;
      // The context is available on load and may contain user info if already signed in.
      if (context.user) {
        setUser(context.user);
      }
    };
    setInitialUser();
  }, []);

  const handleLogin = async () => {
    try {
      // A nonce is required to prevent replay attacks.
      // In a real app, this would be generated by a server.
      const nonce = Math.random().toString(36).substring(2, 10);
      
      // Prompt the user to sign in.
      await sdk.actions.signIn({ nonce, acceptAuthAddress: true });

      const context = await sdk.context;
      // After a successful sign-in, the SDK context is updated with user info.
      if (context.user) {
        setUser(context.user);
      }
    } catch (error) {
      console.error('Sign in failed:', error);
      // You could show an error message to the user here.
    }
  };

  const handleLogout = () => {
    // The SDK doesn't have a "signOut" action. We just clear the local state.
    // The user remains signed into the Farcaster client.
    setUser(null);
  };

  return (
    <div className="w-full min-h-screen bg-gray-800 flex items-center justify-center p-4">
      <div className="w-full max-w-[424px] h-[720px] bg-slate-900 text-white font-mono flex flex-col items-center p-4 rounded-lg shadow-2xl overflow-hidden">
        <header className="w-full flex justify-between items-center mb-4 flex-shrink-0">
          <h1 className="text-4xl font-bold tracking-widest">TETRIS</h1>
          <div className="flex items-center gap-3">
            {user ? (
              <>
                <div className="text-right">
                  <p className="text-sm font-bold truncate max-w-[100px]">{user.displayName || `@${user.username}`}</p>
                  <button 
                    onClick={handleLogout} 
                    className="text-xs text-gray-400 hover:text-red-500 transition-colors focus:outline-none"
                    aria-label="Sign out"
                  >
                    Sign out
                  </button>
                </div>
                {user.pfpUrl && (
                  <img 
                    src={user.pfpUrl} 
                    alt="User profile picture" 
                    className="w-11 h-11 rounded-full border-2 border-slate-600 object-cover" 
                  />
                )}
              </>
            ) : (
              <button 
                onClick={handleLogin} 
                className="px-4 py-2 bg-[#8a63d2] hover:bg-[#7b56bf] rounded-lg font-bold text-sm transition-colors focus:outline-none focus:ring-2 focus:ring-purple-400"
                aria-label="Sign in with Farcaster"
              >
                Sign In
              </button>
            )}
          </div>
        </header>
        <Tetris />
      </div>
    </div>
  );
};

export default App;
